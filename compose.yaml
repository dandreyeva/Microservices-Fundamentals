services:
  psql-db-resource:
    image: postgres:alpine3.20
    container_name: "${RDB_DOCKER_NAME}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER_R}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_R}
      - POSTGRES_DB=${POSTGRES_DB_R}
    volumes:
      - ./init-scripts/resource-db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-data-resource:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    dns:
      - 10.0.2.20
    networks:
      - ls

  psql-db-song:
    image: postgres:alpine3.20
    container_name: "${SDB_DOCKER_NAME}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER_S}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_S}
      - POSTGRES_DB=${POSTGRES_DB_S}
    volumes:
      - ./init-scripts/song-db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-data-song:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    dns:
      - 10.0.2.20
    networks:
      - ls

  psql-db-storage:
    image: postgres:alpine3.20
    container_name: "${STDB_DOCKER_NAME}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER_ST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ST}
      - POSTGRES_DB=${POSTGRES_DB_ST}
    volumes:
      - ./init-scripts/storage-db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-data-storage:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    dns:
      - 10.0.2.20
    networks:
      - ls

  gateway-app:
    container_name: "${GATEWAY_DOCKER_NAME}"
    build:
      context: gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    dns:
      - 10.0.2.20
    networks:
      - ls

  resource-proc-app:
    container_name: "${RESOURCE_PROC_DOCKER_NAME}"
    build:
      context: microservice-resource-processor
      dockerfile: Dockerfile
    links:
      - rabbitmq
    ports:
      - "9292:9292"
    environment:
      - RABBIT_HOST=rabbitmq
    depends_on:
      resource-app:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      song-app:
        condition: service_healthy
    dns:
      - 10.0.2.20
    networks:
      - ls

  resource-app:
    container_name: "${RESOURCE_DOCKER_NAME}"
    healthcheck:
      test: curl --fail http://localhost:9090/ || exit 1
    build:
      context: microservice-resource
      dockerfile: Dockerfile
    links:
      - rabbitmq
    ports:
      - "9090:9090"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_RESOURCE}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME_RESOURCE}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD_RESOURCE}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO_RESOURCE}
      - RABBIT_HOST=rabbitmq
    depends_on:
      psql-db-resource:
        condition: service_healthy
      localstack:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    dns:
      - 10.0.2.20
    networks:
      - ls

  song-app:
    container_name: "${SONG_DOCKER_NAME}"
    healthcheck:
      test: curl --fail http://localhost:8580/ || exit 1
    build:
      context: microservice-song
      dockerfile: Dockerfile
    ports:
      - "8580:8580"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_SONG}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME_SONG}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD_SONG}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO_SONG}
    depends_on:
      psql-db-song:
        condition: service_healthy
    dns:
      - 10.0.2.20
    networks:
      - ls

  storage-app:
    container_name: "${STORAGE_DOCKER_NAME}"
    healthcheck:
      test: curl --fail http://localhost:8780/ || exit 1
    build:
      context: microservice-storage
      dockerfile: Dockerfile
    ports:
      - "8780:8780"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_STORAGE}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME_STORAGE}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD_STORAGE}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO_STORAGE}
    depends_on:
      psql-db-storage:
        condition: service_healthy
    dns:
      - 10.0.2.20
    networks:
      - ls

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME}"
    image: localstack/localstack:s3-latest
    healthcheck:
      test: curl --fail http://127.0.0.1:4566/ || exit 1
      interval: 2s
      retries: 5
      timeout: 10s
    ports:
       - "127.0.0.1:4566:4566"
    environment:
      - DEBUG=${DEBUG:-0}
    volumes:
      - ./init-scripts/s3/init-s3.py:/etc/localstack/init/ready.d/init-s3.py
    networks:
       ls:
         ipv4_address: 10.0.2.20

  rabbitmq:
    image: rabbitmq:3.8.3-management-alpine
    healthcheck:
      test: rabbitmq-diagnostics -q ping
    ports:
      - "5672:5672" #JMS Port
      - "15672:15672"
    dns:
      - 10.0.2.20
    networks:
      - ls

  eureka-app:
    container_name: eureka_app
    build:
      context: eureka-service
      dockerfile: Dockerfile
    ports:
      - '8761:8761'
    dns:
      - 10.0.2.20
    networks:
      - ls


networks:
  ls:
    ipam:
      config:
        - subnet: 10.0.2.0/24
